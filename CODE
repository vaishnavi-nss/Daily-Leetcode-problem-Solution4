class Solution {
public:
    int n;
    vector<int> dir = {0, 1, 0, -1, 0}; // For 4-directional movement

    int dfs(vector<vector<int>>& grid, int i, int j, int islandId, unordered_map<int, int>& islandSize) {
        if (i < 0 || j < 0 || i >= n || j >= n || grid[i][j] != 1) return 0;
        grid[i][j] = islandId; // Mark island with unique ID
        int size = 1;
        
        for (int d = 0; d < 4; d++) {
            size += dfs(grid, i + dir[d], j + dir[d + 1], islandId, islandSize);
        }
        
        return size;
    }

    int largestIsland(vector<vector<int>>& grid) {
        n = grid.size();
        unordered_map<int, int> islandSize; // Map to store island sizes
        int islandId = 2; // Unique island IDs (starting from 2)
        int maxSize = 0;
        
        // Step 1: Identify all islands and store their sizes
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int size = dfs(grid, i, j, islandId, islandSize);
                    islandSize[islandId++] = size;
                    maxSize = max(maxSize, size);
                }
            }
        }
        
        // Step 2: Try flipping each 0 and calculate potential max island size
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    unordered_set<int> seen;
                    int newSize = 1; // Count the flipped cell
                    
                    for (int d = 0; d < 4; d++) {
                        int ni = i + dir[d], nj = j + dir[d + 1];
                        if (ni >= 0 && nj >= 0 && ni < n && nj < n && grid[ni][nj] > 1) {
                            seen.insert(grid[ni][nj]); // Collect unique island IDs
                        }
                    }
                    
                    for (int id : seen) {
                        newSize += islandSize[id];
                    }
                    
                    maxSize = max(maxSize, newSize);
                }
            }
        }
        
        return maxSize;
    }
};
